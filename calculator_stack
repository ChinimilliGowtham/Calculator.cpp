#include <iostream>
#include <stack>
#include <string>
#include <cmath>
#include <cctype>

using namespace std;

// Function to determine operator precedence
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Function to apply an operator to two operands
double applyOperator(double a, double b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case '^': return pow(a, b);
        default: return 0;
    }
}

// Function to check if parentheses are balanced
bool isBalanced(const string& expr) {
    stack<char> s;
    for (size_t i = 0; i < expr.length(); ++i) { // Replaced range-based loop
        char ch = expr[i];
        if (ch == '(') {
            s.push(ch);
        } else if (ch == ')') {
            if (s.empty()) return false;
            s.pop();
        }
    }
    return s.empty();
}

// Function to convert infix expression to postfix
void infixToPostfix(const string& expr, string& postfix) {
    stack<char> ops;
    postfix = "";

    cout << "Converting Infix to Postfix...\n";

    for (size_t i = 0; i < expr.length(); ++i) {
        if (isdigit(expr[i])) {
            while (i < expr.length() && isdigit(expr[i])) {
                postfix += expr[i++];
            }
            postfix += ' ';
            --i;
        } else if (expr[i] == '(') {
            ops.push(expr[i]);
        } else if (expr[i] == ')') {
            while (!ops.empty() && ops.top() != '(') {
                postfix += ops.top();
                postfix += ' ';
                ops.pop();
            }
            ops.pop(); // Discard '('
        } else { // Operator
            while (!ops.empty() && precedence(ops.top()) >= precedence(expr[i])) {
                postfix += ops.top();
                postfix += ' ';
                ops.pop();
            }
            ops.push(expr[i]);
        }

        cout << "Current postfix: " << postfix << endl;
    }

    while (!ops.empty()) {
        postfix += ops.top();
        postfix += ' ';
        ops.pop();
    }

    cout << "Final postfix: " << postfix << endl;
}

// Function to evaluate postfix expression
double evaluatePostfix(const string& expr) {
    stack<double> values;

    cout << "\nEvaluating Postfix Expression...\n";

    for (size_t i = 0; i < expr.length(); ++i) {
        if (isdigit(expr[i])) {
            double val = 0;
            while (i < expr.length() && isdigit(expr[i])) {
                val = val * 10 + (expr[i++] - '0');
            }
            values.push(val);
            --i;
        } else if (expr[i] != ' ') {
            double b = values.top();
            values.pop();
            double a = values.top();
            values.pop();
            double result = applyOperator(a, b, expr[i]);
            values.push(result);
            cout << "Operands: " << a << ", " << b << ", Operator: " << expr[i] << ", Result: " << result << endl;
        }
    }

    return values.top();
}

int main() {
    string expr, postfix;
    double result;

    while (true) {
        cout << "Enter an expression: ";
        getline(cin, expr);

        if (expr.empty()) break;

        if (!isBalanced(expr)) {
            cout << "Error: Unbalanced parentheses\n";
            continue;
        }

        infixToPostfix(expr, postfix);
        result = evaluatePostfix(postfix);
        cout << "Result: " << result << endl;
    }

    return 0;
}
